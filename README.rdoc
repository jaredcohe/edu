create new rails app: rails new edu -d mysql

git
git init
= Initialized empty Git repository in /Users/jec1477/Dropbox/code/edu/.git/
git add .
git commit -m 'first commit'
git remote add origin
= changes /edu/.git file to have origin
create git repo at github
git push -u origin master

Create Databases
rake db:create:all
may need to edit database.yml file for user and password

Start server
rails server

Gemfile
gemfile - ensure it has jquery, sass, and maybe haml, comment coffee gem, added nokogiri, don't need pg
bundle install

Resource Model
rails g scaffold Resource title_manual:text title_scraped:text raw_url:string clean_url:string description:text keywords_manual:text keywords_scraped:text user_id:integer
.model name will be singular, table name will be plural
==
invoke  active_record
create    db/migrate/20121028173855_create_resources.rb
create    app/models/resource.rb
invoke    test_unit
create      test/unit/resource_test.rb
create      test/fixtures/resources.yml
invoke  resource_route
 route    resources :resources
invoke  scaffold_controller
create    app/controllers/resources_controller.rb
invoke    erb
create      app/views/resources
create      app/views/resources/index.html.erb
create      app/views/resources/edit.html.erb
create      app/views/resources/show.html.erb
create      app/views/resources/new.html.erb
create      app/views/resources/_form.html.erb
invoke    test_unit
create      test/functional/resources_controller_test.rb
invoke    helper
create      app/helpers/resources_helper.rb
invoke      test_unit
create        test/unit/helpers/resources_helper_test.rb
invoke  assets
invoke    js
create      app/assets/javascripts/resources.js
invoke    scss
create      app/assets/stylesheets/resources.css.scss
invoke  scss
create    app/assets/stylesheets/scaffolds.css.scss
==

Routes for root
.added to routes: root :to => 'resources#index'
.renamed public/index.html to public/indexOLD.html

- make user model, including authentication and cookies
.railscast 250
.rails g controller users new
.rails g model user email:string password_hash:string password_salt:string
.rake db:migrate
.rails g controller sessions new
- update authentication with revised 250
- railscasts 270 on additional authentication stuff
- railscasts 274 on additional authentication stuff, remember me, reset password
.rails g migration add_auth_token_to_users auth_token:string
.rails g controller password_resets new
.rails g migration add_password_reset_to_users password_reset_token:string
password_reset_sent_at:datetime
.rails g mailer user_mailer password_reset
- rake task to add auth tokens, http://railscasts.com/episodes/66-custom-rake-tasks
- put it on heroku
.bundle exec rake assets:precompile
.heroku create
.git push heroku master
.heroku rename <name>
.heroku run rake db:migrate
.heroku db:push
- add collection model
.rails g scaffold Collection user_id:integer, title:string, description:text, keywords:text
- add collectionize model for join table through
.rails g model collectionize collection_id:integer resource_id:integer order:integer notes:text
- change to mysql
.database.yml change
.migrate
.heroku db:pull

Migrate database
rake db:migrate
==
==  CreateResources: migrating ================================================
-- create_table(:resources)
   -> 0.0112s
==  CreateResources: migrated (0.0114s) =======================================
==

Rename columns from 'scraped' to 'sourced', add 'description_sourced'
rails g migration ChangeResource
==
invoke  active_record
create    db/migrate/20121028180957_change_resource.rb
==
.update migration file
.add new fields to attr_accessible line in resource.rb model
.made mistake first time, then rake db:rollback so I can add :raw_html and remove :clean_url column, then migrate again
rake db:migrate
==
==  ChangeResources: migrating ================================================
-- add_column(:resources, :description_from_source, :text)
   -> 0.0166s
-- add_column(:resources, :raw_html, :text)
   -> 0.0133s
-- remove_column(:resources, :clean_url)
   -> 0.0185s
-- rename_column(:resources, :title_manual, :title_from_user)
   -> 0.0441s
-- rename_column(:resources, :title_scraped, :title_from_source)
   -> 0.0295s
-- rename_column(:resources, :description, :description_from_user)
   -> 0.0186s
-- rename_column(:resources, :keywords_manual, :keywords_from_user)
   -> 0.0211s
-- rename_column(:resources, :keywords_scraped, :keywords_from_source)
   -> 0.0172s
==  ChangeResources: migrated (0.1863s) =======================================
==

Add authentication
http://railscasts.com/episodes/250-authentication-from-scratch-revised
rails g resource user email password_digest
.a resource generator is different from scaffold generator in that it doesn't create all the controller actions
==
invoke  active_record
create    db/migrate/20121028222628_create_users.rb
create    app/models/user.rb
invoke    test_unit
create      test/unit/user_test.rb
create      test/fixtures/users.yml
invoke  controller
create    app/controllers/users_controller.rb
invoke    erb
create      app/views/users
invoke    test_unit
create      test/functional/users_controller_test.rb
invoke    helper
create      app/helpers/users_helper.rb
invoke      test_unit
create        test/unit/helpers/users_helper_test.rb
invoke    assets
invoke      js
create        app/assets/javascripts/users.js
invoke      scss
create        app/assets/stylesheets/users.css.scss
invoke  resource_route
 route    resources :users
==
edit model user.rb
uncomment bcrypt-ruby gem in gemfile
edit users_controller.rb
rails g controller sessions new
==
create  app/controllers/sessions_controller.rb
 route  get "sessions/new"
invoke  erb
create    app/views/sessions
create    app/views/sessions/new.html.erb
invoke  test_unit
create    test/functional/sessions_controller_test.rb
invoke  helper
create    app/helpers/sessions_helper.rb
invoke    test_unit
create      test/unit/helpers/sessions_helper_test.rb
invoke  assets
invoke    js
create      app/assets/javascripts/sessions.js
invoke    scss
create      app/assets/stylesheets/sessions.css.scss
==
edit routes to add <resources :sessions> and get rid of the get request

cookies and remember me
http://railscasts.com/episodes/274-remember-me-reset-password
rails g migration add_auth_token_to_users auth_token:string
==
invoke  active_record
create    db/migrate/20121029123127_add_auth_token_to_users.rb
==
rake db:migrate
edit some files

reset password
http://railscasts.com/episodes/274-remember-me-reset-password
rails g controller password_resets new
==
create  app/controllers/password_resets_controller.rb
 route  get "password_resets/new"
invoke  erb
create    app/views/password_resets
create    app/views/password_resets/new.html.erb
invoke  test_unit
create    test/functional/password_resets_controller_test.rb
invoke  helper
create    app/helpers/password_resets_helper.rb
invoke    test_unit
create      test/unit/helpers/password_resets_helper_test.rb
invoke  assets
invoke    js
create      app/assets/javascripts/password_resets.js
invoke    scss
create      app/assets/stylesheets/password_resets.css.scss
==
edit model user.rb
edit password_resets_controller.rb
rails g migration add_password_reset_to_users password_reset_token:string password_reset_sent_at:datetime
==
invoke  active_record
create    db/migrate/20121029132244_add_password_reset_to_users.rb
==
rake db:migrate
rails g mailer user_mailer password_reset
==
create  app/mailers/user_mailer.rb
invoke  erb
create    app/views/user_mailer
create    app/views/user_mailer/password_reset.text.erb
invoke  test_unit
create    test/functional/user_mailer_test.rb
==
restart the server
finish editing other files

heroku
add gem 'pg' to gemfile
add to /etc/my.cnf this [mysqld] max_allowed_packet = 32M
heroku create
==
Creating warm-forest-3395... done, stack is cedar
http://warm-forest-3395.herokuapp.com/ | git@heroku.com:warm-forest-3395.git
Git remote heroku added
==
git push heroku master
.heroku receiving push...
heroku rename bedu
heroku run rake db:migrate
heroku db:push


xxx
modularize the scraping, move into application helper

add no dupes

#add link to email that makes the user confirm - "change a field in the database to show the person is confirmed" - end of railscasts 274, that code can be used for this

#add ability to create collections by putting in a URL or searching Resources
http://railscasts.com/episodes/196-nested-model-form-revised

fix tagging
http://railscasts.com/episodes/382-tagging

#make user ID in collection a hidden field
# collection#create work properly, scrape resource

#add search of collections and resources
http://railscasts.com/episodes/343-full-text-search-in-postgresql
http://railscasts.com/episodes/240-search-sort-paginate-with-ajax
http://railscasts.com/episodes/111-advanced-search-form-revised
.search of "r" and "R" should return R programming and not everything with an R

#add reviews of collections and resources
.user_id, resource_id

#add ability to drag and drop collections

#remove duplication of URLs
.use URL and title?

#add todo list

heroku custom domain
heroku addons:add custom_domains
heroku domains:add <name such as www.disclaim.in>
heroku domains:add <name such as disclaim.in>
go to host and add to A names under DNS management:
75.101.163.44
75.101.145.87
174.129.212.2
http://devcenter.heroku.com/articles/custom-domains
to destroy database on internet, go to directory and: <heroku db:push>
to push: git push heroku
before pushing to heroku run: bundle exec rake assets:precompile


------
Errors, Problems
# to fix heroku not seeing css scss files, type this in terminal: RAILS_ENV=production bundle exec rake assets:precompile




== Welcome to Rails

Rails is a web-application framework that includes everything needed to create
database-backed web applications according to the Model-View-Control pattern.

This pattern splits the view (also called the presentation) into "dumb"
templates that are primarily responsible for inserting pre-built data in between
HTML tags. The model contains the "smart" domain objects (such as Account,
Product, Person, Post) that holds all the business logic and knows how to
persist themselves to a database. The controller handles the incoming requests
(such as Save New Account, Update Product, Show Post) by manipulating the model
and directing data to the view.

In Rails, the model is handled by what's called an object-relational mapping
layer entitled Active Record. This layer allows you to present the data from
database rows as objects and embellish these data objects with business logic
methods. You can read more about Active Record in
link:files/vendor/rails/activerecord/README.html.

The controller and view are handled by the Action Pack, which handles both
layers by its two parts: Action View and Action Controller. These two layers
are bundled in a single package due to their heavy interdependence. This is
unlike the relationship between the Active Record and Action Pack that is much
more separate. Each of these packages can be used independently outside of
Rails. You can read more about Action Pack in
link:files/vendor/rails/actionpack/README.html.


== Getting Started

1. At the command prompt, create a new Rails application:
       <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)

2. Change directory to <tt>myapp</tt> and start the web server:
       <tt>cd myapp; rails server</tt> (run with --help for options)

3. Go to http://localhost:3000/ and you'll see:
       "Welcome aboard: You're riding Ruby on Rails!"

4. Follow the guidelines to start developing your application. You can find
the following resources handy:

* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
* Ruby on Rails Tutorial Book: http://www.railstutorial.org/


== Debugging Rails

Sometimes your application goes wrong. Fortunately there are a lot of tools that
will help you debug it and get it back on the rails.

First area to check is the application log files. Have "tail -f" commands
running on the server.log and development.log. Rails will automatically display
debugging and runtime information to these files. Debugging info will also be
shown in the browser on requests from 127.0.0.1.

You can also log your own messages directly into the log file from your code
using the Ruby logger class from inside your controllers. Example:

  class WeblogController < ActionController::Base
    def destroy
      @weblog = Weblog.find(params[:id])
      @weblog.destroy
      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
    end
  end

The result will be a message in your log file along the lines of:

  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!

More information on how to use the logger is at http://www.ruby-doc.org/core/

Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are
several books available online as well:

* Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)
* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)

These two books will bring you up to speed on the Ruby language and also on
programming in general.


== Debugger

Debugger support is available through the debugger command when you start your
Mongrel or WEBrick server with --debugger. This means that you can break out of
execution at any point in the code, investigate and change the model, and then,
resume execution! You need to install ruby-debug to run the server in debugging
mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:

  class WeblogController < ActionController::Base
    def index
      @posts = Post.all
      debugger
    end
  end

So the controller will accept the action, run the first line, then present you
with a IRB prompt in the server window. Here you can do things like:

  >> @posts.inspect
  => "[#<Post:0x14a6be8
          @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
       #<Post:0x14a6620
          @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
  >> @posts.first.title = "hello from a debugger"
  => "hello from a debugger"

...and even better, you can examine how your runtime objects actually work:

  >> f = @posts.first
  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
  >> f.
  Display all 152 possibilities? (y or n)

Finally, when you're ready to resume execution, you can enter "cont".


== Console

The console is a Ruby shell, which allows you to interact with your
application's domain model. Here you'll have all parts of the application
configured, just like it is when the application is running. You can inspect
domain models, change values, and save to the database. Starting the script
without arguments will launch it in the development environment.

To start the console, run <tt>rails console</tt> from the application
directory.

Options:

* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
  made to the database.
* Passing an environment name as an argument will load the corresponding
  environment. Example: <tt>rails console production</tt>.

To reload your controllers and models after launching the console run
<tt>reload!</tt>

More information about irb can be found at:
link:http://www.rubycentral.org/pickaxe/irb.html


== dbconsole

You can go to the command line of your database directly through <tt>rails
dbconsole</tt>. You would be connected to the database with the credentials
defined in database.yml. Starting the script without arguments will connect you
to the development database. Passing an argument will connect you to a different
database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
PostgreSQL and SQLite 3.

== Description of Contents

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- assets
  |       |-- images
  |       |-- javascripts
  |       `-- stylesheets
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   `-- tasks
  |-- log
  |-- public
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   |-- cache
  |   |-- pids
  |   |-- sessions
  |   `-- sockets
  `-- vendor
      |-- assets
          `-- stylesheets
      `-- plugins

app
  Holds all the code that's specific to this particular application.

app/assets
  Contains subdirectories for images, stylesheets, and JavaScript files.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from
  ApplicationController which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb. Models descend from
  ActiveRecord::Base by default.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use
  eRuby syntax by default.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the
  common header/footer method of wrapping views. In your views, define a layout
  using the <tt>layout :default</tt> and create a file named default.html.erb.
  Inside default.html.erb, call <% yield %> to render the view using this
  layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are
  generated for you automatically when using generators for controllers.
  Helpers can be used to wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when
  generated using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers. This directory is in
  the load path.

public
  The directory available for the web server. Also contains the dispatchers and the
  default HTML files. This should be set as the DOCUMENT_ROOT of your web
  server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate
  command, template test files will be generated for you and placed in this
  directory.

vendor
  External libraries that the application depends on. Also includes the plugins
  subdirectory. If the app has frozen rails, those gems also go here, under
  vendor/rails/. This directory is in the load path.
